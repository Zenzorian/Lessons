//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputActions/KeyboardInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KeyboardInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeyboardInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyboardInput"",
    ""maps"": [
        {
            ""name"": ""Keyboard Control"",
            ""id"": ""47ab8a32-04ae-4f6a-82e0-0bff67ef05a3"",
            ""actions"": [
                {
                    ""name"": ""ForwardKey"",
                    ""type"": ""Button"",
                    ""id"": ""47ec79ec-f059-448f-8fc1-6f635cc7cfed"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BackwardKey"",
                    ""type"": ""Button"",
                    ""id"": ""03b83956-e3ca-4277-90e4-9f771b942fbf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightKey"",
                    ""type"": ""Button"",
                    ""id"": ""44a4a83a-4fe7-4b1d-8f4f-843ff709e747"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftKey"",
                    ""type"": ""Button"",
                    ""id"": ""66518414-a144-453c-b9b2-de3fe9d5393d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""59ec1b40-ce48-4423-b1f2-14b240498f6a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11012a63-f862-40fd-8b2d-e93d7277a2ec"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30029fff-8817-4ddd-a53c-338124419662"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackwardKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce41c649-ded6-44fb-91bd-d7e34c418119"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackwardKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7b10acf-bafa-4a31-9265-991951381bda"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41438ad9-219d-4724-bed2-bcc50eb4ef90"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d027e05f-87e2-4f5f-a173-f7ca44fcff11"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a912a2ee-5830-4f0c-a559-5dab7fa3ed1f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Keyboard Control
        m_KeyboardControl = asset.FindActionMap("Keyboard Control", throwIfNotFound: true);
        m_KeyboardControl_ForwardKey = m_KeyboardControl.FindAction("ForwardKey", throwIfNotFound: true);
        m_KeyboardControl_BackwardKey = m_KeyboardControl.FindAction("BackwardKey", throwIfNotFound: true);
        m_KeyboardControl_RightKey = m_KeyboardControl.FindAction("RightKey", throwIfNotFound: true);
        m_KeyboardControl_LeftKey = m_KeyboardControl.FindAction("LeftKey", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keyboard Control
    private readonly InputActionMap m_KeyboardControl;
    private IKeyboardControlActions m_KeyboardControlActionsCallbackInterface;
    private readonly InputAction m_KeyboardControl_ForwardKey;
    private readonly InputAction m_KeyboardControl_BackwardKey;
    private readonly InputAction m_KeyboardControl_RightKey;
    private readonly InputAction m_KeyboardControl_LeftKey;
    public struct KeyboardControlActions
    {
        private @KeyboardInput m_Wrapper;
        public KeyboardControlActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ForwardKey => m_Wrapper.m_KeyboardControl_ForwardKey;
        public InputAction @BackwardKey => m_Wrapper.m_KeyboardControl_BackwardKey;
        public InputAction @RightKey => m_Wrapper.m_KeyboardControl_RightKey;
        public InputAction @LeftKey => m_Wrapper.m_KeyboardControl_LeftKey;
        public InputActionMap Get() { return m_Wrapper.m_KeyboardControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardControlActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardControlActions instance)
        {
            if (m_Wrapper.m_KeyboardControlActionsCallbackInterface != null)
            {
                @ForwardKey.started -= m_Wrapper.m_KeyboardControlActionsCallbackInterface.OnForwardKey;
                @ForwardKey.performed -= m_Wrapper.m_KeyboardControlActionsCallbackInterface.OnForwardKey;
                @ForwardKey.canceled -= m_Wrapper.m_KeyboardControlActionsCallbackInterface.OnForwardKey;
                @BackwardKey.started -= m_Wrapper.m_KeyboardControlActionsCallbackInterface.OnBackwardKey;
                @BackwardKey.performed -= m_Wrapper.m_KeyboardControlActionsCallbackInterface.OnBackwardKey;
                @BackwardKey.canceled -= m_Wrapper.m_KeyboardControlActionsCallbackInterface.OnBackwardKey;
                @RightKey.started -= m_Wrapper.m_KeyboardControlActionsCallbackInterface.OnRightKey;
                @RightKey.performed -= m_Wrapper.m_KeyboardControlActionsCallbackInterface.OnRightKey;
                @RightKey.canceled -= m_Wrapper.m_KeyboardControlActionsCallbackInterface.OnRightKey;
                @LeftKey.started -= m_Wrapper.m_KeyboardControlActionsCallbackInterface.OnLeftKey;
                @LeftKey.performed -= m_Wrapper.m_KeyboardControlActionsCallbackInterface.OnLeftKey;
                @LeftKey.canceled -= m_Wrapper.m_KeyboardControlActionsCallbackInterface.OnLeftKey;
            }
            m_Wrapper.m_KeyboardControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ForwardKey.started += instance.OnForwardKey;
                @ForwardKey.performed += instance.OnForwardKey;
                @ForwardKey.canceled += instance.OnForwardKey;
                @BackwardKey.started += instance.OnBackwardKey;
                @BackwardKey.performed += instance.OnBackwardKey;
                @BackwardKey.canceled += instance.OnBackwardKey;
                @RightKey.started += instance.OnRightKey;
                @RightKey.performed += instance.OnRightKey;
                @RightKey.canceled += instance.OnRightKey;
                @LeftKey.started += instance.OnLeftKey;
                @LeftKey.performed += instance.OnLeftKey;
                @LeftKey.canceled += instance.OnLeftKey;
            }
        }
    }
    public KeyboardControlActions @KeyboardControl => new KeyboardControlActions(this);
    public interface IKeyboardControlActions
    {
        void OnForwardKey(InputAction.CallbackContext context);
        void OnBackwardKey(InputAction.CallbackContext context);
        void OnRightKey(InputAction.CallbackContext context);
        void OnLeftKey(InputAction.CallbackContext context);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputActions/GamepadInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GamepadInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GamepadInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GamepadInput"",
    ""maps"": [
        {
            ""name"": ""Gamepad Control"",
            ""id"": ""47ab8a32-04ae-4f6a-82e0-0bff67ef05a3"",
            ""actions"": [
                {
                    ""name"": ""LeftStickMove"",
                    ""type"": ""Value"",
                    ""id"": ""cc25db88-c5b7-4ff6-bad7-8f7166d239a8"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightStickMove"",
                    ""type"": ""Value"",
                    ""id"": ""7ed2abd1-45d5-4f88-b6d7-1f658c300379"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""61aa2ce7-1d12-4fe5-ba96-9a0f586251b3"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStickMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30c9decb-6e92-4808-a464-1ae4da83cdb1"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStickMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gamepad Control
        m_GamepadControl = asset.FindActionMap("Gamepad Control", throwIfNotFound: true);
        m_GamepadControl_LeftStickMove = m_GamepadControl.FindAction("LeftStickMove", throwIfNotFound: true);
        m_GamepadControl_RightStickMove = m_GamepadControl.FindAction("RightStickMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gamepad Control
    private readonly InputActionMap m_GamepadControl;
    private IGamepadControlActions m_GamepadControlActionsCallbackInterface;
    private readonly InputAction m_GamepadControl_LeftStickMove;
    private readonly InputAction m_GamepadControl_RightStickMove;
    public struct GamepadControlActions
    {
        private @GamepadInput m_Wrapper;
        public GamepadControlActions(@GamepadInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftStickMove => m_Wrapper.m_GamepadControl_LeftStickMove;
        public InputAction @RightStickMove => m_Wrapper.m_GamepadControl_RightStickMove;
        public InputActionMap Get() { return m_Wrapper.m_GamepadControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamepadControlActions set) { return set.Get(); }
        public void SetCallbacks(IGamepadControlActions instance)
        {
            if (m_Wrapper.m_GamepadControlActionsCallbackInterface != null)
            {
                @LeftStickMove.started -= m_Wrapper.m_GamepadControlActionsCallbackInterface.OnLeftStickMove;
                @LeftStickMove.performed -= m_Wrapper.m_GamepadControlActionsCallbackInterface.OnLeftStickMove;
                @LeftStickMove.canceled -= m_Wrapper.m_GamepadControlActionsCallbackInterface.OnLeftStickMove;
                @RightStickMove.started -= m_Wrapper.m_GamepadControlActionsCallbackInterface.OnRightStickMove;
                @RightStickMove.performed -= m_Wrapper.m_GamepadControlActionsCallbackInterface.OnRightStickMove;
                @RightStickMove.canceled -= m_Wrapper.m_GamepadControlActionsCallbackInterface.OnRightStickMove;
            }
            m_Wrapper.m_GamepadControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftStickMove.started += instance.OnLeftStickMove;
                @LeftStickMove.performed += instance.OnLeftStickMove;
                @LeftStickMove.canceled += instance.OnLeftStickMove;
                @RightStickMove.started += instance.OnRightStickMove;
                @RightStickMove.performed += instance.OnRightStickMove;
                @RightStickMove.canceled += instance.OnRightStickMove;
            }
        }
    }
    public GamepadControlActions @GamepadControl => new GamepadControlActions(this);
    public interface IGamepadControlActions
    {
        void OnLeftStickMove(InputAction.CallbackContext context);
        void OnRightStickMove(InputAction.CallbackContext context);
    }
}
